# This builds the D2GS Wireshark dissectors for Windows and Linux
name: D2GS

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  WS_SRC: ${{ github.workspace }}\wireshark
  WS_BUILD: ${{ github.workspace }}\wireshark\build
  D2GS_WS_DIR: ${{ github.workspace }}\wireshark\plugins\epan\d2gs

jobs:
  linux-build:
    name: Build ${{ matrix.cfg.name }}-${{ matrix.cfg.os }}${{ matrix.cfg.extension }}
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    strategy:
      matrix:
        cfg:
          - {name: 'packet-d2gs', os: 'debian12', prefix: 'linux', extension: '.so', architecture: 'x64'}
          - {name: 'packet-d2gs', os: 'ubuntu24.04', prefix: 'linux', extension: '.so', architecture: 'x64'}

    container:
      image: fortenbt/wireshark-dev:${{ matrix.cfg.os }}

    steps:
    - name: Check out
      uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -Wno-depcrecated

    - name: Build
      # Build your program with the given configuration
      run: cmake --build build --config ${{env.BUILD_TYPE}}

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.cfg.name }}-${{ matrix.cfg.os }}${{ matrix.cfg.extension }}
        path: build/d2gs.so

  windows-build:
    name: Build ${{ matrix.cfg.name }}-${{ matrix.cfg.sys }}-${{ matrix.cfg.env }}.dll

    runs-on: windows-latest

    strategy:
      matrix:
        cfg:
          - { name: 'packet-d2gs', sys: 'mingw64', env: 'x86_64' }

    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Set Up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.cfg.sys }}
          update: true
          path-type: inherit
          install: >-
            mingw-w64-${{ matrix.cfg.env }}-c-ares
            mingw-w64-${{ matrix.cfg.env }}-cmake
            mingw-w64-${{ matrix.cfg.env }}-gcc
            mingw-w64-${{ matrix.cfg.env }}-libgcrypt
            mingw-w64-${{ matrix.cfg.env }}-minizip
            mingw-w64-${{ matrix.cfg.env }}-nghttp2
            mingw-w64-${{ matrix.cfg.env }}-qt6-5compat
            mingw-w64-${{ matrix.cfg.env }}-qt6-base
            mingw-w64-${{ matrix.cfg.env }}-qt6-multimedia
            mingw-w64-${{ matrix.cfg.env }}-qt6-tools
            mingw-w64-${{ matrix.cfg.env }}-toolchain
            cpio
            flex
            git
            make
            patch
      - name: Check out
        uses: actions/checkout@v4
      - name: Get Wireshark
        run: |
          WS_SRC=$(cygpath -u "${{ env.WS_SRC }}")
          echo "Cloning Wireshark to ${WS_SRC}"
          git clone --branch wireshark-4.4.3 https://github.com/wireshark/wireshark.git ${WS_SRC}
      - name: Copy D2GS into Wireshark
        run: |
          D2GS_WS_DIR=$(cygpath -u "${{ env.D2GS_WS_DIR }}")
          WS_SRC=$(cygpath -u "${{ env.WS_SRC }}")
          echo "Creating ${D2GS_WS_DIR} and copying CMakeListsCustom.txt to ${WS_SRC}"
          mkdir -p ${D2GS_WS_DIR}
          cp CMakeListsCustom.txt ${WS_SRC}
          cp AUTHORS CMakeLists.txt ${D2GS_WS_DIR}
          cp -r src ${D2GS_WS_DIR}
      - name: Create build directory
        run: |
          WS_BUILD=$(cygpath -u "${{ env.WS_BUILD }}")
          echo "Making the Wireshark build directory: ${WS_BUILD}"
          mkdir -p ${WS_BUILD}
      - name: Debug PATH
        run: echo $PATH
      - name: Configure Build
        run: |
          WS_BUILD=$(cygpath -u "${{ env.WS_BUILD }}")
          echo "Calling cmake from ${WS_BUILD}"
          cd ${WS_BUILD}
          cmake -G Ninja -DENABLE_CCACHE=Yes -DFETCH_lua=Yes ..
      - name: Build with Ninja
        run: |
          WS_BUILD=$(cygpath -u "${{ env.WS_BUILD }}")
          echo "Calling ninja from ${WS_BUILD}"
          cd ${WS_BUILD}
          ninja
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.cfg.name }}-${{ matrix.cfg.sys }}-${{ matrix.cfg.env }}.dll
          path: ${{ env.WS_BUILD }}\run\plugins\4.4\epan\d2gs.dll
